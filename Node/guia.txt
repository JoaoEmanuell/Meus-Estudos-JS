// EXPORTS

Para exportar um objeto / função / variavel...
Você deve criar um arquivo com o nome que você deseja e dentro dele criar o objeto que será exportado, após o objeto ser criado você deve colocar o export default para exportar o objeto.

function sum (a,b) { return a+b; }
module.exports = sum;

Então para usar o objeto que foi exportado, você deve importar o objeto por meio da função require, passando o caminho até o arquivo e atribuindo a uma variavel, por definição todo objeto que foi exportado deve ter o mesmo nome do arquivo que ele está.

var sumFunction = require("./source/sum");

Dessa forma poderá ser usado a função soma mesmo ela estando em outro arquivo.

// Servidor

Para criar um servidor é necessário importar o modulo http do node.

var http = require('http');

Após isso utilize a função createServer para criar um servidor e o método listen passando a porta onde o servidor irá responder.

http.createServer(. . .).listen(porta);

Dentro da função createServer ela recebe um callback (nada mais é do que uma função que recebe dois paramentros um chamado req [requisição] e outro chamado res que é a resposta do servidor) que é chamado quando o servidor recebe uma requisição, para retornar algo para o usuario você pode utilizar :

    res.end("Mensage");

// Exemplo

    var http = require('http');

    http.createServer(function(req, res){
        res.end("Hello World");
    }).listen(8786);

// Express

    https://expressjs.com // site do express

    Express é um framework para javascript que facilita a criação de aplicações web.

    Primeiro instale o express com o comando:
        
        npm install express --save

    Para utilizar o express você irá criar uma constante chamada express que irá requerir o express.

        const express = require("express");

    O retorno desse require é uma função

    Depois crie uma constante app que irá chamar a função express

        const app = express();

    O express é orientado a rotas, então para criar uma rota é necessário utilizar o método app.get, passando o caminho que será acessado e o callback que será chamado quando o usuario acessar o caminho.

        app.get("/nome_da_rota", function(req, res){
            res.send("Resposta da rota");
        });

        app.get("/", function(req, res){
            res.send("Hello World");
        });

    Para executar o servidor você deve utilizar o método app.listen, passando a porta que será utilizada e uma função de callback que será chamada quando o servidor estiver pronto.

        app.listen(porta, function(){
            console.log("Server is running on port porta");
        });

        app.listen(8081, function(){
            console.log("Server is running on port 8081");
        });

    // Paramentos nas rotas

    Para criar um paramentro na rota faça o seguinte :

        app.get("/nome_rota/:nome_do_paramentro")

    Para utlizar os dados do paramentro utilize a função de callback e no paramentro req você utilize .params.nome_do_paramentro :

        app.get("/nome_rota/:nome_do_paramentro", function(req, res){
            res.send(req.params.nome_do_paramentro);
        });

    Exemplo :

        app.get("/hello/:name", function(req, res) {
            res.send(`<h1>Hello ${req.params.name}!</h1>`);
        });

    // Enviando arquivo html pela rota.

    Para enviar uma arquivo html utilize o res.sendFile passando o caminho até o arquivo.

        app.get("/rota", function(req, res){
            res.sendFile(__dirname + "/index.html"); // A variavel __dirname serve para indicar o caminho completo até a aplicação.
        });

        app.get("/", function(req, res) {
            res.sendFile(`${__dirname}/templates/html/index.html`);
        });

// Nodemon

    O Nodemon é um pacote que executa o código automaticamente caso ele seja alterado.

    Primeiramente instale ele a flag -g serve para instalar ele de forma global.

    sudo npm install nodemon -g

    Após isso para executar utilize :

        nodemon nome_arquivo.js

// Sequelize

    https://sequelize.org // site do sequelize

    Sequelize é um pacote que facilita a conexão com o banco de dados.

    Primeiramente instale o pacote com o comando:

        npm install --save sequelize

    Para utilizar o mysql você irá precisar de outro pacote, instale ele :

        npm install --save mysql2

    Depois crie uma constante que irá receber a função Sequelize.

        const Sequelize = require("sequelize");

    Depois crie uma constante que irá receber todos os dados de Sequelize, dentro dessa constante você deve passar a database, nome de usuario, senha e um objeto contendo dois campos o primeiro chamado de host que é o endereço do banco de dados e o segundo chamado de dialect que é o tipo de banco de dados que será utilizado.

        const sequelize = new Sequelize("database", "username", "password", {
            host: "localhost",
            dialect: "mysql"
        });

    Exemplo : 

        const sequelize = new Sequelize('NODE', 'root', 'root', {
            host : "localhost",
            dialect : "mysql",
        });

    Dessa forma a conexão será criada com sucesso, para verificar se a conexão foi bem sucedida você pode fazer o seguinte :

        sequelize.authenticate().then(function(){
            console.log("Conectado com sucesso");
        }).catch(function(erro){
            console.log("Falha ao se conectar : " + erro);
        }); 